using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace TersPerspektif
{

    public partial class Form1 : Form
    {
            double[,] R;
            double[,] Rt;
            int xa, ya, za, nxs, nzs;
            double alfa, beta, teta, K, X, Y, bX, bY, payda;
           // String filename;
            double D;
            Bitmap texture;
            Bitmap newBitmap = new Bitmap(400,400);

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            
        }


        double[] sinus;
            double[] cosinus;
        public Form1()
        {
            InitializeComponent();
            R = new double[3, 3];  //transformasyon matrisi
            Rt = new double[3, 3];  //ters transformasyon matrisi
            sinus = new double[1800];
            cosinus=new double[1800];
            for (int i = 0; i < 1800; i++)
            {
                sinus[i] = Math.Sin(i * Math.PI / 1800);
                cosinus[i] = Math.Cos(i * Math.PI / 1800);
            }

        }

        public void ttransformasyon(double alfa, double beta, double teta)
        {
            Rt[0, 0] = Math.Cos(beta * Math.PI / 180) * Math.Cos(teta * Math.PI / 180);
            Rt[0, 1] = Math.Cos(beta * Math.PI / 180) * Math.Sin(teta * Math.PI / 180);
            Rt[0, 2] = - Math.Sin(beta * Math.PI / 180);

            Rt[1, 0] = - Math.Cos(alfa * Math.PI / 180) * Math.Sin(teta * Math.PI / 180) + Math.Sin(beta * Math.PI / 180) * Math.Sin(alfa * Math.PI / 180) * Math.Cos(teta * 3.14 / 180);
            Rt[1, 1] = Math.Cos(alfa * Math.PI / 180) * Math.Cos(teta * Math.PI / 180) + Math.Sin(beta * Math.PI / 180) * Math.Sin(alfa * Math.PI / 180) * Math.Sin(teta * Math.PI / 180);;
            Rt[1, 2] = Math.Cos(beta * Math.PI / 180) * Math.Sin(alfa * Math.PI / 180);

            Rt[2, 0] = Math.Sin(teta * Math.PI / 180) * Math.Sin(alfa * Math.PI / 180)  + Math.Sin(beta * Math.PI / 180) * Math.Cos(alfa * Math.PI / 180) * Math.Cos(teta * 3.14 / 180);
            Rt[2, 1] = - Math.Sin(alfa * Math.PI / 180) * Math.Cos(teta * Math.PI / 180) + Math.Sin(beta * Math.PI / 180) * Math.Cos(alfa * Math.PI / 180) * Math.Sin(teta * Math.PI / 180);
            Rt[2, 2] = Math.Cos(beta * Math.PI / 180) * Math.Cos(alfa * Math.PI / 180);
        }

        public void transformasyon(double alfa, double beta, double teta)
        {
            R[0, 0] = Math.Cos(beta * Math.PI / 180) * Math.Cos(teta * Math.PI / 180);
            R[0, 1] = - Math.Cos(alfa * Math.PI / 180) * Math.Sin(teta * Math.PI / 180) + Math.Sin(beta * Math.PI / 180) * Math.Sin(alfa * Math.PI / 180) * Math.Cos(teta * 3.14 / 180);
            R[0, 2] = Math.Sin(teta * Math.PI / 180) * Math.Sin(alfa * Math.PI / 180)  + Math.Sin(beta * Math.PI / 180) * Math.Cos(alfa * Math.PI / 180) * Math.Cos(teta * 3.14 / 180);

            R[1, 0] = Math.Cos(beta * Math.PI / 180) * Math.Sin(teta * Math.PI / 180);
            R[1, 1] = Math.Cos(alfa * Math.PI / 180) * Math.Cos(teta * Math.PI / 180) + Math.Sin(beta * Math.PI / 180) * Math.Sin(alfa * Math.PI / 180) * Math.Sin(teta * Math.PI / 180);;
            R[1, 2] = - Math.Sin(alfa * Math.PI / 180) * Math.Cos(teta * Math.PI / 180) + Math.Sin(beta * Math.PI / 180) * Math.Cos(alfa * Math.PI / 180) * Math.Sin(teta * Math.PI / 180);

            R[2, 0] = - Math.Sin(beta * Math.PI / 180);
            R[2, 1] = Math.Cos(beta * Math.PI / 180) * Math.Sin(alfa * Math.PI / 180);
            R[2, 2] = Math.Cos(beta * Math.PI / 180) * Math.Cos(alfa * Math.PI / 180);
        }

 
 
//------------------------------------------------------------------------------------------------------
//Bu fonksiyon girilen parametrelere göre 400x400'lük bir alana ters perspektif dönüşüm ile doku kaplar.
//Default parametreler (X,Y,Z)=(0,60,150) (alfa,beta,teta)=(0,0,0)
        private void button1_Click(object sender, EventArgs e)
        {
            Graphics g = Graphics.FromImage(newBitmap);
            g.Clear(SystemColors.Control);

            xa = Convert.ToInt32(textBox1.Text);
            ya = Convert.ToInt32(textBox2.Text);
            za = Convert.ToInt32(textBox3.Text);
            alfa = Convert.ToInt32(textBox4.Text);
            beta = Convert.ToInt32(textBox5.Text);
            teta = Convert.ToInt32(textBox6.Text);
            D = Convert.ToInt32(textBox7.Text);

            ttransformasyon(alfa, beta, teta);


            int x_m, z_m, i, j;
            double fonk_1, fonk_2, fonk_3, fonk_4, mod1, mod2;
            for(i=0;i<400;i++)
            {
                for(j=0;j<400;j++)
                {
                    x_m = j - 200; //x ve z noktaları merkeze taşınır
                    z_m = -i + 200;
                    K = (-za / payda);
                    X = xa + K * (Rt[0, 0] * x_m + D * Rt[0, 1] + z_m * Rt[0, 2]); //K değerine göre x ve y'nin yeni değerleri atanıyor
                    Y = ya + K * (Rt[1, 0] * x_m + D * Rt[1, 1] + z_m * Rt[1, 2]);
                    payda = Rt[2, 0] * x_m + D * Rt[2, 1] + Rt[2, 2] * z_m;
                    if (payda == 0) // payda 0 olursa K değerimiz de payda 0 olamayacağı için sonsuz çıkar
                        continue;
                    if (K > 0)
                    {
                        fonk_1 = Math.Floor(X + 0.5);//Floor fonksiyonu ile sayılar yakın olan tam sayı değerine yuvarlanıyor.
                        fonk_2 = Math.Floor(Y + 0.5);
                        fonk_3 = texture.Width;
                        fonk_4 = texture.Height;
                        mod1 = Math.Abs(fonk_1 % fonk_3); // Mod işlemi ile dokuyu doldur
                        mod2 = Math.Abs(fonk_2 % fonk_4);

                        if (Y < 0) //(X,Y)=(0,0) dan öncesine geçişimiz olursa görüntüyü doğru şekilde tutmak için ters alma işlemi uygulanır
                            mod2 = (int)(texture.Height - mod2) % texture.Height;

                        if (X < 0)
                            mod1 = texture.Width - mod1 - 1;
                        newBitmap.SetPixel(j, i, texture.GetPixel(Convert.ToInt32(mod1), Convert.ToInt32(mod2))); // piksellerler oluşturulan resmi belleğe at,resmi oluştur
                    }
                }
            }
            pictureBox1.Image = newBitmap;
            
        }

//---------------------------------------------------------------------------
//Bu fonksiyon kullanıcıdan resim seçmesini ister ve belleğe yükler.
        private void button2_Click(object sender, EventArgs e)
        {
            resimAc.Title = "Browse BMP Files";
            resimAc.DefaultExt = "bmp";
            resimAc.Filter = "BMP files (*.bmp)|*.BMP";
            if (resimAc.ShowDialog() == DialogResult.OK)
            {
                texture = new Bitmap(resimAc.FileName);
            }
        }


//----------------------------------------------------------------------------------------------
//Ters perspektif dönüşüm mantığı ile silindir yüzeyine doku kaplamayı gerçekleştiren fonksiyon.
//Default parametreler (X,Y,Z)=(0,300,150) (alfa,beta,teta)=(0,0,0)
        private void button3_Click(object sender, EventArgs e)
        {
        }

//---------------------------------------------------------------------------
// Ortografik dönüşüm ile yarım küre üzerine doku kaplama fonksiyonu.
// Default parametreler (X,Y,Z)=(0,0,0) (alfa,beta,gama)=(0,0,180)
        private void button4_Click(object sender, EventArgs e)
        {
        }

//---------------------------------------------------------------------------
//Bu fonksiyon girilen parametrelere göre açısal tarama mantığına dayalı ters perspektif dönüşüm ile doku kaplar.
//Default parametreler (X,Y,Z)=(0,60,150) (alfa,beta,teta)=(0,0,0)
        private void button5_Click(object sender, EventArgs e)
        {
        }

//---------------------------------------------------------------------------
//Perspektif dönüşüm kullanarak silindir yüzeye doku kaplamayı gerçekleştirir.
//Default parametreler (X,Y,Z)=(0,300,150) (alfa,beta,teta)=(0,0,0)
        private void button6_Click(object sender, EventArgs e)
        {
        }

//---------------------------------------------------------------------------
//Anti-alising uygulayarak z=0 yüzeyine ters perspektif dönüşüm ile doku kaplayan fonksiyon.
//Default parametreler (X,Y,Z)=(0,60,150) (alfa,beta,teta)=(0,0,0)
        private void button7_Click(object sender, EventArgs e)
        {
        }

//---------------------------------------------------------------------------
// Ortografik dönüşüm ile oluşturulan yarım küre üzerindeki belirli bir küre dilimine doku germe uygulayan fonksiyon.
// Default parametreler (X,Y,Z)=(0,0,0) (alfa,beta,gama)=(0,0,180)
        private void button8_Click(object sender, EventArgs e)
        {
        }
    }
}
